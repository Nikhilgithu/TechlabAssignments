class Cell {
    constructor(symbol) {
      this.mark = symbol;
    }
  
    static newCell() {
      return new Cell("z");
    }
  
    isMarked() {
      return this.mark !== "z";
    }
  
    markCell(symbol) {
      this.mark = symbol;
    }
  }
  
  module.exports = Cell;
  

class Player {
    constructor(name, symbol) {
      this.name = name;
      this.symbol = symbol;
    }
  
    static newPlayer(name, symbol) {
      return new Player(name, symbol);
    }
  
    markCell(cell) {
      cell.markCell(this.symbol);
    }
  }
  
  module.exports = Player;
  

const Cell = require("./cell");

class Board {
    constructor(cells) {
        this.cells = cells;
      }
  static newBoard() {
    const cells = [];

    for (let index = 0; index < 9; index++) {
      cells.push(Cell.newCell());
    }

    return new Board(cells);
  }

  analyseResult() {
    const winningCombinations = [
      [0, 1, 2], [3, 4, 5], [6, 7, 8], 
      [0, 3, 6], [1, 4, 7], [2, 5, 8],
      [0, 4, 8], [2, 4, 6] 
    ];

    for (const combination of winningCombinations) {
      const [cell1, cell2, cell3] = combination;
      const symbol1 = this.cells[cell1].mark;
      const symbol2 = this.cells[cell2].mark;
      const symbol3 = this.cells[cell3].mark;

      if (symbol1 !== "z" && symbol1 === symbol2 && symbol2 === symbol3) {
        return [symbol1, "win"];
      }
    }

    if (isBoardFull) {
      return [null, "draw"];
    }

    return [null, "ongoing"];
  }

  displayBoard() {
    console.log("Current Board:");
    console.log("-------------");

    for (let row = 0; row < 3; row++) {
      let rowString = "| ";
      for (let col = 0; col < 3; col++) {
        const cell = this.cells[row * 3 + col];
        const symbol = cell.isMarked() ? cell.mark : " ";
        rowString += symbol + " | ";
      }
      console.log(rowString);
      console.log("-------------");
    }
  }
}

module.exports = Board;

const Cell = require("./cell");
const Player = require("./player");
const Board = require("./board");

class Game {
  constructor(players, board, turn) {
    this.players = players;
    this.board = board;
    this.turn = turn;
    this.isGameActive = true;
  }

  static newGame(player1Name, player2Name) {
    const players = [
      Player.newPlayer(player1Name, "X"),
      Player.newPlayer(player2Name, "O")
    ];
    const board = Board.newBoard();
    const turn = 0;

    return new Game(players, board, turn);
  }

  play(cellNo) {
    if (!this.isGameActive) {
      return "Game has ended.";
    }

    if (cellNo < 0 || cellNo >= 9) {
      return "Invalid cell number.";
    }

    const isCellMarked = this.board.cells[cellNo].isMarked();
    if (isCellMarked) {
      return "Cell is already marked.";
    }

    // Mark the cell
    const currentPlayer = this.players[this.turn % 2];
    currentPlayer.markCell(this.board.cells[cellNo]);

    this.turn += 1;

    // Analyze the result
    const [symbol, state] = this.board.analyseResult();

    if (state === "win") {
      this.isGameActive = false;
      if (symbol === this.players[0].symbol) {
        return `${this.players[0].name} has won the game!`;
      } else {
        return `${this.players[1].name} has won the game!`;
      }
    } else if (state === "draw") {
      this.isGameActive = false;
      return "The game is a draw.";
    }

    return "Continue game.";
  }
}

module.exports = Game;


const Game = require("./game");
const Player = require("./player");
const Board = require("./board");
const Cell = require("./cell");


try {
  const g1 = Game.newGame("Player 1", "Player 2");
  console.log("Tic Tac Toe Game\n");
  console.log("Initial Board:");
  g1.board.displayBoard();
  console.log("\n");

  console.log("Game in Progress:\n");

  console.log(g1.play(4)); // Player 1 (X) marks cell 4
  g1.board.displayBoard();
  console.log("\n");

  console.log(g1.play(0)); // Player 2 (O) marks cell 0
  g1.board.displayBoard();
  console.log("\n");

  console.log(g1.play(2)); 
  g1.board.displayBoard();
  console.log("\n");

  console.log(g1.play(1)); 
  g1.board.displayBoard();
  console.log("\n");

  console.log(g1.play(8)); 
  g1.board.displayBoard();
  console.log("\n");

  console.log(g1.play(5)); 
  g1.board.displayBoard();
  console.log("\n");

  console.log(g1.play(7)); 
  g1.board.displayBoard();
  console.log("\n");

  console.log(g1.play(6)); 
  g1.board.displayBoard();
  console.log("\n");

  console.log(g1.play(3)); 
  g1.board.displayBoard();
  console.log("\n");
} catch (error) {
  console.log(error.message);
}

